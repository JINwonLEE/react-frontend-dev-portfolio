{
    "basic_info": {
      "description_header": "안녕하세요",
      "description": "👋 저는 모든 일들을 조금 더 편하고 쉽게 만들고 싶은 개발자 이진원 입니다. 현재는 플랫폼, 인프라 개발자로 일하고 있으며 특히 k8s와 같은 클라우드 플랫폼에 연관된 일을 하고 있습니다. 저는 플랫폼에 관심이 많을 뿐만 아니라 Go, Python, C++ 등 다양한 언어에도 관심이 많은 편입니다. 그래서 경험을 해본 언어들이 많습니다. 이러한 경험을 토대로 시스템을 만들어서 사람들이 제가 만든 시스템으로 좀 더 편하게 일을 했으면 좋겠습니다. :)",
      "section_name": {
        "about": "About me",
        "projects": "Projects",
        "skills": "Skills",
        "experience": "Experience"
      }
    },
    "projects": [
      {
        "title": "MLOps",
        "startDate": "2024",
        "description": "네트워크 관련 데이터 수집 및 프로세싱 시스템(VISTA)이 사용 가능한 환경에서 AI model에 대한 mlops을 구축하였습니다. 특정 threshold에 따라서 훈련을 자동으로 진행시키고 특정 데이터를 쿼리(VISTA을 사용)하여 그 데이터를 기반으로  AI model을 자동으로 재훈련하고 production 환경에 자동으로 deploy을 할 수 있도록 구축하였습니다. 또한 MLOps 시스템을 다양한 cloud platform에 deploy하고 특정 환경(AWS)에 대해서는 환경에서 제공하는 서비스를 활용해서 좀 더 효율적인 시스템을 구축하였습니다. ",
        "images": [
          "images/portfolio/mlops/mlops-1.jpg",
          "images/portfolio/mlops/mlops-2.jpg"
        ],
        "url": "",
        "technologies": [
          {
            "class": "devicon-python-plain",
            "name": "Python"
          },
          {
            "class": "devicon-kubernetes-plain",
            "name": "Kubernetes"
          },
          {
            "class": "devicon-amazonwebservices-plain-wordmark",
            "name": "AWS"
          },
          {
            "class": "devicon-git-plain",
            "name": "Git"
          }
        ]
      },
      {
        "title": "Data Mirroring",
        "startDate": "2022",
        "description": "특정 유형의 패킷이 들어왔을 때 해당 패킷을 특정 target server에 데이터를 복사해서 보내는 모듈을 구현하였습니다. 한 오픈소스를 참조하여 저희 환경과 운영 조건에 맞게 튜닝 및 구현을 진행하였습니다. Data Mirroring module은 최대 초당 14만 패킷을 미러링하고 제한된 자원으로 최대한의 효율을 보장하여야 합니다. 해당 모듈은 현재 특정 지역에 배포되어 운영 중에 있습니다.",
        "images": [
          "images/portfolio/mirroring/mirroring-1.jpg"
        ],
        "url": "https://github.com/session-replay-tools/tcpcopy",
        "technologies": [
          {
            "class": "devicon-c-plain",
            "name": "C"
          },
          {
            "class": "devicon-linux-plain",
            "name": "Linux"
          }
        ]
      },
      {
        "title": "Cloud Native VISTA",
        "startDate": "2023",
        "description": "사내 제품인 VISTA(네트워크 관련 데이터 전처리, 쿼리 시스템)은 VM 형태로 배포 및 운영이 되고 있었습니다. 이 제품을 다양한 클라우드 플랫폼에서 동작할 수 있도록 porting 작업을 진행하였습니다. 본 작업을 진행하면서 다양한 cloud open source module을 활용하였고 그 결과 cloud native VISTA을 만들 수 있었습니다. 대표적으로 사용한 open source로는 K-Native가 있습니다. 이 외에도 다양한 cloud platform(ex. k8s, aws)의 특성을 살려서 VISTA을 좀 더 효율적으로 설계하였습니다.",
        "images": [
          "images/portfolio/cloud-native-vista/cloud-native-vista-1.jpg",
          "images/portfolio/cloud-native-vista/cloud-native-vista-2.jpg"
        ],
        "url": "",
        "technologies": [
          {
            "class": "devicon-kubernetes-plain",
            "name": "Kubernetes"
          },
          {
            "class": "devicon-amazonwebservices-plain-wordmark",
            "name": "AWS"
          },
          {
            "class": "devicon-python-plain",
            "name": "Python"
          }
        ]
      },
      {
        "title": "One Click Kubernetes Creation",
        "startDate": "2023",
        "description": "Cloud 환경에 배포되는 application을 개발할 때에는 자신만의 cloud 환경이 있었으면 하는 생각을 많이 합니다. 환경을 공유하면서 개발을 하게 되면 여러가지 문제가 되는 상황이 발생합니다. 이런 상황을 피하고자 각 개발자들에게 개인 고유의 cloud cluster을 제공하고자 했습니다. 이러한 환경을 제공하기 위해서 손쉽게 kubernetes cluster을 제작할 수 있는 template을 제작하였습니다. 현재는 cluster 구성을 위한 최소 ip 1개(접속을 위한 ip)만 있으면 최소 갯수의 control plane, data plane을 구성하고 cni(calico), storage(ceph)을 사용하여 환경 구성을 진행하고 있습니다. 추후에는 특정 버전, cni, storage, platform 종류 등 여러가지 option을 추가해서 one-click cloud platform creation을 진행할 계획입니다.",
        "images": [
          "images/portfolio/one-click/one-click-1.jpg"
        ],
        "url": "",
        "technologies": [
          {
            "class": "devicon-kubernetes-plain",
            "name": "Kubernetes"
          },
          {
            "class": "devicon-linux-plain",
            "name": "Linux"
          },
          {
            "class": "devicon-bash-plain",
            "name": "Bash"
          }
        ]
      },
      {
        "title": "Vista Operator",
        "startDate": "2023",
        "description": "이전까진 helm을 통해서 VISTA을 cloud platform에 deploy을 하였습니다. 그러나 helm으로 cloud 제품을 관리하기에는 한계가 존재했습니다. 모듈간의 의존성, 모듈의 생명 주기, 리소스 관리 등 여러가지 상황에 알맞게 대처하기에는 helm으로는 부족하였고 그에 따라서 자체적으로 Custom Resource을 만들고 그에 맞는 Operator을 구현하기로 하였습니다. VISTA을 deploy할 때에는 각 모듈의 의존성을 고려하고 운영 중에 발생할 수 있는 상황에 맞춰서 platform layer에서 의도했던 방향대로 sub module들을 운영하였습니다.",
        "images": [
          "images/portfolio/vista-operator/vista-operator-1.jpg"
        ],
        "url": "",
        "technologies": [
          {
            "class": "devicon-kubernetes-plain",
            "name": "Kubernetes"
          },
          {
            "class": "devicon-go-plain",
            "name": "Go"
          }
        ]
      },
      {
        "title": "CI/CD",
        "startDate": "2022",
        "description": "사내 구축되어 있는 Platform 위에 이미지 빌드(CI) 및 배포(CD)를 자동화하기 위해서 bash script를 활용하여 자동화하였습니다. virt-sysprep을 이용해서 패키지 설치 및 환경 구성을 이미지 내에 포함 시키고 VNFD(Virtualize Network Function Descriptor)을 통해서 모듈의 template을 구성하여 자동으로 배포하였습니다. VNFD에 상당히 복잡한 configuration이 존재하지만 자동화를 위해서 template화하였습니다.",
        "images": [
          "images/portfolio/cicd/cicd-1.jpg"
        ],
        "url": "",
        "technologies": [
          {
            "class": "devicon-bash-plain",
            "name": "Bash"
          },
          {
            "class": "devicon-python-plain",
            "name": "Python"
          },
          {
            "class": "devicon-linux-plain",
            "name": "Linux"
          }
        ]
      },
      {
        "title": "VNFD validator, generator",
        "startDate": "2021",
        "description": "VNFD는 Virtualize Network Function Descriptor의 약자로 VNF을 배포하기 위해 필요한 descriptor입니다. Descriptor안에는 수많은 정보가 들어가야합니다. 필요한 모든 필드를 올바른 종류의 값을 입력하는 것은 정말 어렵습니다. Human error가 상당히 많이 발생해서 그 descriptor을 검증하기 위한 툴이 필요했습니다. 그래서 각 필드에 대한 validation tool을 구현하였습니다. Validation tool에서 그치지 않고 좀 더 사용자 편의를 위해서 generation tool을 구현하였습니다. 이를 토대로 좀 더 user friendly한 descriptor을 제공할 수 있었습니다.",
        "images": [
          "images/portfolio/vnfd/vnfd-1.jpg",
          "images/portfolio/vnfd/vnfd-2.jpg"
        ],
        "url": "",
        "technologies": [
          {
            "class": "devicon-python-plain",
            "name": "Python"
          },
          {
            "class": "devicon-bash-plain",
            "name": "Bash"
          }
        ]
      },
      {
        "title": "Image Registry Operator",
        "startDate": "2020",
        "description": "Kubernetes 환경에서 cloud화된 image registry을 구축하기 위해서 Custom Resource을 정의하고 그에 맞는 operator을 구현하였습니다. image라는 crd을 통해서 kubernetes의 storage에 image를 저장함으로써 kubernetes의 특성을 좀 더 살릴 수 있었습니다. 예를 들면 image resource의 저장소를 kubernetes의 pvc에 위임함으로써 application layer의 storage 관리를 platform layer로 layer down시킬 수 있습니다. 이것은 기존 image registry(ex. nexus, harbor 등)를 별도로 구축해야하는 수고를 덜 수 있습니다.",
        "images": [
          "images/portfolio/registry-operator/registry-operator-1.jpg"
        ],
        "url": "",
        "technologies": [
          {
            "class": "devicon-kubernetes-plain",
            "name": "Kubernetes"
          },
          {
            "class": "devicon-go-plain",
            "name": "Go"
          }
        ]
      },
      {
        "title": "AI Assistant",
        "startDate": "2019",
        "description": "MacOS에는 시리라는 ai assistant 시리가 존재합니다. 시리는 여러가지 os의 기능을 대신 실행해주고 여러가지 음성 명령어를 인식합니다. 이러한 assistant가 TmaxOS에도 존재했으면 했습니다. 그래서 TmaxOS을 위한 ai assitant을 개발하였습니다. 음성 인식을 통해 유저의 명령을 받아들이고 NLP processing을 통해 해당 음성이 어떠한 명령을 의미하는지 판단한 다음 그 명령을 실행하고 실행 결과를 음성 합성을 통해서 유저에게 전달합니다. AI assistant의 ui 뿐만 아니라 ai assistant의 데이터 모델, 구조 설계에 기여하였습니다. ",
        "images": [
          "images/portfolio/ai-assistant/ai-assistant-1.jpg"
        ],
        "url": "",
        "technologies": [
          {
            "class": "devicon-cplusplus-plain",
            "name": "C++"
          },
          {
            "class": "devicon-linux-plain",
            "name": "Linux"
          }
        ]
      },
      {
        "title": "Convergence Aware CNN Training",
        "startDate": "2018",
        "description": "CNN trainin을 진행할 때 상당히 많은 부분을 차지하는 것이 바로 back-propagation입니다. 이러한 상황에서 자원의 효율성과 성능 향상을 위해서 계산량을 어떻게 하면 줄일 수 있을지 고민하였습니다. CNN의 training에서 제일 중요한 것은 weight을 얼마나 잘 최적화하느냐에 달려 있었습니다. 각 weight의 추이를 비교하여 보고 그 weight가 더 이상 훈련이 필요 없다 판단이 될 때 수렴하였다 판단하고 그 weight에 대한 훈련을 진행하지 않습니다. 이렇게 수렴한 weight을 증가시키면서 모델을 최적화하고 상황에 따라 computation을 줄이는 상황을 연출하였습니다.",
        "images": [
          "images/portfolio/cnn/cnn-1.jpg"
        ],
        "url": "",
        "technologies": [
          {
            "class": "devicon-cplusplus-plain",
            "name": "C++"
          },
          {
            "class": "devicon-linux-plain",
            "name": "Linux"
          },
          {
            "class": "devicon-tensorflow-original",
            "name": "Tensorflow"
          }
        ]
      }
    ],
    "experience": [
      {
        "company": "Samsung Electronics",
        "title": "Platform Engineer / Software Engineer",
        "years": "03.2021 - present",
        "mainTech": [
          "Python",
          "Bash",
          "Linux"
        ],
        "technologies": [
          "Go",
          "AWS",
          "Kubernetes",
          "C",
          "Docker",
          "OCP",
          "Virtual Machine"
        ]
      },
      {
        "company": "Tmax Cloud",
        "title": "Platform Engineer",
        "years": "03.2020 - 02.2021",
        "mainTech": [
          "Go"
        ],
        "technologies": [
          "Tekton",
          "Docker",
          "Kubernetes",
          "Linux"
        ]
      },
      {
        "company": "Tmax OS",
        "title":  "Software Engineer",
        "years": "01.2019 - 02.2020",
        "mainTech": [
          "C++"
        ],
        "technologies": [
          "Linux",
          "Bash",
          "Java", 
          "Python"
        ]
      },
      {
        "company": "MLSL(Machine Learning System Lab)",
        "title":  "Researcher",
        "years": "08.2016 - 01.2019",
        "mainTech": [
          "C++"
        ],
        "technologies": [
          "Tensorflow",
          "Cuda",
          "Python"
        ]
      }
    ]
  }
